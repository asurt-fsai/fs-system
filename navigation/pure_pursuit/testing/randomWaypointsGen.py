#!/usr/bin/env python3
# pylint: disable=all
# mypy: ignore-errors
import numpy as np
import matplotlib.pyplot as plt
import time
import rospy
import math

# from tqdm import tqdm
from scipy import interpolate
from std_msgs.msg import Float64MultiArray, Float64
from nav_msgs.msg import Path
from geometry_msgs.msg import Pose, PoseStamped

s = Path


# generate a random circular track
def generate_track(n=100):
    final = 2 * np.pi - np.pi / 6
    # generate random angles
    theta = np.arange(0, final, final / n)
    # generate random radii
    r = np.random.uniform(0, 100, n)
    # print(r)
    x = [0]
    y = [0]
    for i in range(n):
        x.append(r[i] * np.cos(theta[i]))
        y.append(r[i] * np.sin(theta[i]))
    x = np.array(x)
    y = np.array(y)
    return [x, y]


# fit spline to track
def fit_spline(x, y, mult=3, per=1):
    # print(x,y)
    n = mult * len(x)
    # fit spline
    tck, u = interpolate.splprep([x, y], s=0, per=per)
    u_new = np.linspace(u.min(), u.max(), n)
    x, y = interpolate.splev(u_new, tck)

    return [x, y]


# smooth the track
def smooth_track(x, y, iter=2):
    # smooth the track
    for i in range(iter):
        x[1:-1] = (x[0:-2] + x[1:-1] + x[2:]) / 3
        y[1:-1] = (y[0:-2] + y[1:-1] + y[2:]) / 3

    return [x, y]


# calculate the track length
def calculate_track_length(x, y):
    # track length
    l = 0
    n = len(x)
    # print(n)
    for i in range(-1, n - 1):
        try:
            l += np.sqrt((x[i] - x[i + 1]) ** 2 + (y[i] - y[i + 1]) ** 2)
        except:
            print(i, l)
    return l


# generate cones from track
def generate_cones(x, y, track_width=1, distance_between_cones=1):
    n = len(x)
    # track length
    l = calculate_track_length(x, y)
    print("Track Length: ", l)  # ,", Number of cones: ",n_cones)
    # track normals
    nx = np.zeros(n)
    ny = np.zeros(n)
    for i in range(n):
        if i == 0:
            nx[i] = -(y[i + 1] - y[i])
            ny[i] = x[i + 1] - x[i]
        elif i == n - 1:
            nx[i] = -(y[i] - y[i - 1])
            ny[i] = x[i] - x[i - 1]
        else:
            nx[i] = -(y[i + 1] - y[i - 1])
            ny[i] = x[i + 1] - x[i - 1]
    # normalize
    norm = np.sqrt(nx**2 + ny**2)
    nx = nx / norm
    ny = ny / norm
    left_track_x = x + track_width * nx
    left_track_y = y + track_width * ny
    left_l = calculate_track_length(left_track_x, left_track_y)
    number_of_left_cones = int(left_l / distance_between_cones)
    x0, y0 = left_track_x[0], left_track_y[0]
    orange_x_list = [x0]
    orange_y_list = [y0]
    left_x_list = [x0]
    left_y_list = [y0]
    left_nx_list = [nx[0]]
    left_ny_list = [ny[0]]
    for i in range(n):
        dist = np.sqrt((left_track_x[i] - x0) ** 2 + (left_track_y[i] - y0) ** 2)
        if dist >= distance_between_cones:
            left_x_list.append(left_track_x[i])
            left_y_list.append(left_track_y[i])
            left_nx_list.append(nx[i])
            left_ny_list.append(ny[i])
            x0, y0 = left_track_x[i], left_track_y[i]

    right_track_x = x - track_width * nx
    right_track_y = y - track_width * ny
    right_l = calculate_track_length(right_track_x, right_track_y)
    number_of_right_cones = int(right_l / distance_between_cones)
    x0, y0 = right_track_x[0], right_track_y[0]
    orange_x_list.append(x0)
    orange_y_list.append(y0)
    right_x_list = [x0]
    right_y_list = [y0]
    right_nx_list = [nx[0]]
    right_ny_list = [ny[0]]
    for i in range(n):
        dist = np.sqrt((right_track_x[i] - x0) ** 2 + (right_track_y[i] - y0) ** 2)
        if dist >= distance_between_cones:
            right_x_list.append(right_track_x[i])
            right_y_list.append(right_track_y[i])
            right_nx_list.append(nx[i])
            right_ny_list.append(ny[i])
            x0, y0 = right_track_x[i], right_track_y[i]
    print(
        "Number of left cones: ",
        number_of_left_cones,
        ", Number of right cones: ",
        number_of_right_cones,
    )
    return {
        "blue": [left_x_list, left_y_list],
        "yellow": [right_x_list, right_y_list],
        "orange": [orange_x_list, orange_y_list],
    }


# plot the track
def plot_track(x, y, color="black"):
    plt.plot(x, y, "-", color=color)


# plot the cones
def plot_cones(x, y, color="blue"):
    plt.plot(x, y, "o", color=color)


# plot the track and cones
def plot_(track=None, cones=None):
    if all(v is None for v in [track, cones]):
        print("No data to plot")
        return
    plt.figure()
    plot_track(track[0], track[1]) if track is not None else None
    if cones is not None:
        for i in cones:
            plot_cones(cones[i][0], cones[i][1], color=i)

    plt.xlabel("x")
    plt.ylabel("y")
    plt.axis("equal")
    plt.show()


track = generate_track(20)
smoothed = smooth_track(*track, 4)
spline = fit_spline(*smoothed, 20)
# plot_(track=spline)
# print(len(spline[0]))
# x_coord = spline[0]
# y_coord = spline[1]
x_coord = [
    0.0,
    0.15572923745201234,
    0.3617941167765771,
    0.6163200015497412,
    0.9174322553475408,
    1.2632562417460318,
    1.6519173243212495,
    2.0815408666492488,
    2.5502522323060592,
    3.056176784867737,
    3.597439887910319,
    4.172166905009856,
    4.778483199742392,
    5.414514135683968,
    6.078385076410627,
    6.768221385498419,
    7.482148426523388,
    8.21829156306157,
    8.974776158689021,
    9.749727576981776,
    10.541271181515887,
    11.34753233586739,
    12.166636403612342,
    12.996708748326775,
    13.835874733586738,
    14.682259722968277,
    15.533989080047435,
    16.389188168400256,
    17.245982351602784,
    18.10249699323107,
    18.956857456861144,
    19.807189106069067,
    20.651617304430875,
    21.488267415522607,
    22.315264802920318,
    23.130734830200048,
    23.932802864428417,
    24.719932555135916,
    25.49185333881927,
    26.248590655403213,
    26.990169944812454,
    27.7166166469717,
    28.42795620180569,
    29.124214049239132,
    29.805415629196723,
    30.471586381603206,
    31.122751746383287,
    31.758937163461677,
    32.38016807276311,
    32.98646991421228,
    33.57786812773393,
    34.15438815325277,
    34.716055430693494,
    35.262895399980835,
    35.79493350103952,
    36.312195173794244,
    36.81470585816974,
    37.30249099409072,
    37.7755760214819,
    38.233986380268014,
    38.67774751037375,
    39.10643696174692,
    39.51326330146171,
    39.88669705393169,
    40.215096015706735,
    40.48681798333671,
    40.690220753371456,
    40.813662122360824,
    40.84549988685469,
    40.77409184340289,
    40.58786205644321,
    40.28277100366499,
    39.86916365980047,
    39.35900300568279,
    38.76425202214513,
    38.09687369002067,
    37.36883099014259,
    36.59208690334406,
    35.77860441045826,
    34.94034649231836,
    34.08927612975754,
    33.237356303608976,
    32.39654762901022,
    31.575830284986058,
    30.775378036398745,
    29.993745982237083,
    29.229489221489892,
    28.481162853146003,
    27.747321976194243,
    27.02652168962341,
    26.31731709242234,
    25.618263283579843,
    24.927915362084747,
    24.244828426925867,
    23.567557577092014,
    22.89465791157203,
    22.224684529354715,
    21.556192529428905,
    20.887737010783407,
    20.217873072407034,
    19.545155813288623,
    18.868140332416985,
    18.185613660331207,
    17.497570189633382,
    16.804395937791504,
    16.106477126258635,
    15.404199976487822,
    14.697950709932167,
    13.988115548044728,
    13.275080712278575,
    12.55923242408678,
    11.840956904922406,
    11.12064037623853,
    10.398669059488217,
    9.67542917612454,
    8.951306947600552,
    8.226688595369357,
    7.501960340884001,
    6.777508405597564,
    6.053719010963111,
    5.330978378433712,
    4.609671201365547,
    3.8900330773711755,
    3.1720275380569953,
    2.4555891677524246,
    1.7406525507869364,
    1.0271522714899486,
    0.3150229141908978,
    -0.39580093678077555,
    -1.1053846970956398,
    -1.8137937824242556,
    -2.5210936084371873,
    -3.2273495908049954,
    -3.932627145198265,
    -4.636991687287521,
    -5.340508632743346,
    -6.043243397236305,
    -6.745261396436957,
    -7.446628046015869,
    -8.147408761643602,
    -8.847677531240723,
    -9.547596834641398,
    -10.247381355023597,
    -10.947246450202528,
    -11.647407477993445,
    -12.348079796211582,
    -13.049478762672182,
    -13.75181973519048,
    -14.455318071581713,
    -15.160189129661122,
    -15.866648267243939,
    -16.57491084214542,
    -17.285192212180775,
    -17.997707735165253,
    -18.712672768914093,
    -19.43030252058729,
    -20.15052429580301,
    -20.87237819524243,
    -21.59473396546377,
    -22.31646135302527,
    -23.03643010448516,
    -23.753509966401644,
    -24.46657068533297,
    -25.174482007837344,
    -25.87611368047301,
    -26.570335449798197,
    -27.25601706237112,
    -27.93202826475002,
    -28.597238803493116,
    -29.25051842515863,
    -29.890741904207953,
    -30.517296792309846,
    -31.130518854193184,
    -31.730846426635956,
    -32.31871784641614,
    -32.89457145031168,
    -33.45884557510055,
    -34.011978557560724,
    -34.55440873447016,
    -35.08657444260684,
    -35.60891401874871,
    -36.12186579967375,
    -36.625868122159915,
    -37.12135932298517,
    -37.60877773892751,
    -38.08855730773958,
    -38.56077060800395,
    -39.02486548832119,
    -39.48022772311204,
    -39.92624308679718,
    -40.36229735379737,
    -40.78777629853333,
    -41.20206569542578,
    -41.60455131889544,
    -41.99461894336305,
    -42.37165434324932,
    -42.73504329297499,
    -43.08417156696076,
    -43.418424939627364,
    -43.737189185395536,
    -44.039850078685994,
    -44.325793393919454,
    -44.594404905516654,
    -44.84508469949712,
    -45.07781906258353,
    -45.29337350249187,
    -45.4925674256664,
    -45.67622023855147,
    -45.84515134759138,
    -46.00018015923044,
    -46.14212607991294,
    -46.27180851608324,
    -46.39004687418559,
    -46.49766056066435,
    -46.59546898196382,
    -46.68429154452829,
    -46.764947654802114,
    -46.83825671922955,
    -46.90503814425493,
    -46.96611133632257,
    -47.022295701876786,
    -47.07441064736189,
    -47.12317014626125,
    -47.16846978215191,
    -47.209822423571474,
    -47.246738765380734,
    -47.278729502440434,
    -47.30530532961142,
    -47.32597694175445,
    -47.340255033730294,
    -47.34765030039975,
    -47.34767343662361,
    -47.33983513726264,
    -47.32364609717767,
    -47.29861701122943,
    -47.264258574278735,
    -47.22008148118637,
    -47.1655964268131,
    -47.10031410601973,
    -47.02374521366705,
    -46.93540044461582,
    -46.834790493726864,
    -46.72142605586092,
    -46.59494730753633,
    -46.45565989958463,
    -46.30408268042543,
    -46.14073459533905,
    -45.966134589605794,
    -45.78080160850597,
    -45.5852545973199,
    -45.38001250132788,
    -45.16559426581025,
    -44.9425188360473,
    -44.71130515731935,
    -44.472472174906706,
    -44.2265388340897,
    -43.97402408014862,
    -43.71544685836378,
    -43.45132611401552,
    -43.182180792384116,
    -42.90852983874993,
    -42.63089219839321,
    -42.34978681659432,
    -42.065732638633534,
    -41.779245727472926,
    -41.49037932478218,
    -41.198218797863014,
    -40.901728034077934,
    -40.59987092078934,
    -40.29161134535972,
    -39.97591319515155,
    -39.65174035752728,
    -39.318056719849345,
    -38.97382616948025,
    -38.61801259378243,
    -38.24957988011835,
    -37.86749191585048,
    -37.47071258834128,
    -37.058205784953216,
    -36.628935393048735,
    -36.18186529999032,
    -35.715959393140395,
    -35.23018155986147,
    -34.723495687515964,
    -34.19516376077309,
    -33.64591799590393,
    -33.07694309016714,
    -32.48942386575768,
    -31.884545144870394,
    -31.263491749700247,
    -30.627448502442103,
    -29.977600225290907,
    -29.315131740441515,
    -28.64122787008887,
    -27.957073436427898,
    -27.26385326165346,
    -26.562752167960507,
    -25.854954977543894,
    -25.141646512598594,
    -24.42401159531944,
    -23.703235047901416,
    -22.980444215660512,
    -22.2563489029691,
    -21.53147457054935,
    -20.806345867913105,
    -20.081487444572296,
    -19.35742395003875,
    -18.634680033824417,
    -17.913780345441104,
    -17.19524953440078,
    -16.47961225021524,
    -15.767393142396415,
    -15.059116860456214,
    -14.355308053906459,
    -13.656491372259104,
    -12.963191465025954,
    -12.275932981718968,
    -11.595240571849962,
    -10.92163888493088,
    -10.255621316937042,
    -9.596904860609621,
    -8.944396706668716,
    -8.296966108825712,
    -7.653482320792119,
    -7.0128145962793225,
    -6.373832188998827,
    -5.735404352662024,
    -5.096400340980415,
    -4.45568940766539,
    -3.812140806428454,
    -3.164623790980996,
    -2.512007615034489,
    -1.8531615323004162,
    -1.1869547964901566,
    -0.5122566613152224,
    0.17206361951300342,
    0.8671367922830093,
    1.5740936032834152,
    2.2940647988027068,
    3.028181125129504,
    3.7775733285523287,
    4.542926196942001,
    5.321903630129526,
    6.110916153513403,
    6.906370242284794,
    7.704672371634713,
    8.502229016754324,
    9.295446652834645,
    10.080731755066829,
    10.854490798641935,
    11.613130258751013,
    12.353056610585229,
    13.070676329335594,
    13.762395890193268,
    14.424621768349272,
    15.053760438994757,
    15.64621837732076,
    16.198402058518415,
    16.70671795777879,
    17.16757255029295,
    17.57737231125202,
    17.932523715847065,
    18.230024434562637,
    18.470450255559072,
    18.655716163522182,
    18.787739483297127,
    18.868437539729097,
    18.899727657663252,
    18.88352716194478,
    18.821753377418847,
    18.71632362893064,
    18.56915524132532,
    18.382165539448074,
    18.15727184814407,
    17.8963914922585,
    17.601441796636518,
    17.27434008612331,
    16.917003685564058,
    16.53134991980393,
    16.119296113688105,
    15.68275959206175,
    15.223657679770064,
    14.743907701658182,
    14.245426982571333,
    13.73013284735464,
    13.199942620853301,
    12.656773627912514,
    12.10254319337742,
    11.539168642093225,
    10.968567298905068,
    10.39265648865817,
    9.813353536197662,
    9.232575766368761,
    8.6522405040166,
    8.074265073986371,
    7.500566801123284,
    6.933063010272464,
    6.3736710262791325,
    5.824308173988419,
    5.286891778245545,
]
y_coord = [
    4.440892098500626e-15,
    0.4678990567766919,
    0.9160322087704489,
    1.3450840128586026,
    1.7557390259184764,
    2.1486818048273966,
    2.524596906462684,
    2.8841688877016676,
    3.2280823054216703,
    3.5570217165000146,
    3.8716716778140285,
    4.172716746241035,
    4.460841478658358,
    4.736730431943323,
    5.001068162973256,
    5.254539228625478,
    5.497828185777319,
    5.7316195913060985,
    5.9565980020891445,
    6.17344797500378,
    6.3828540669273295,
    6.585500834737117,
    6.782072835310472,
    6.973254625524712,
    7.1597307622571655,
    7.342185802385156,
    7.521304302786009,
    7.697770820337049,
    7.872269911915601,
    8.04548613439899,
    8.218104044664539,
    8.390808199589571,
    8.564283156051419,
    8.739213470927396,
    8.916283701094832,
    9.096178403431052,
    9.279582135961022,
    9.467290677842424,
    9.66051597600754,
    9.86056729794195,
    10.068753911131218,
    10.286385083060912,
    10.514770081216609,
    10.755218173083875,
    11.009038626148278,
    11.277540707895396,
    11.562033685810793,
    11.863826827380038,
    12.184229400088709,
    12.524550671422364,
    12.886099908866587,
    13.270186379906942,
    13.678119352028997,
    14.111208092718325,
    14.570761869460496,
    15.058089949741074,
    15.574501601045636,
    16.121306090859754,
    16.699812686669,
    17.31133065595894,
    17.957169266215136,
    18.63816682604032,
    19.348464621970045,
    20.077221861472808,
    20.81347921802103,
    21.546277365087153,
    22.264656976143577,
    22.957658724662735,
    23.614323284117038,
    24.223691327978905,
    24.7748464400505,
    25.261752244645955,
    25.687686734329933,
    26.056975606332138,
    26.373944557882286,
    26.642919286210077,
    26.868225488545225,
    27.054188862117424,
    27.205135104156394,
    27.325389911891833,
    27.41927898255346,
    27.49112801337097,
    27.545262108699717,
    27.585259436500195,
    27.612491161798754,
    27.627922790716028,
    27.632519829372672,
    27.62724778388933,
    27.613072160386672,
    27.590958464985338,
    27.56187220380598,
    27.52677888296924,
    27.486644008595785,
    27.44243308680626,
    27.39511162372132,
    27.345645125461612,
    27.294999098147784,
    27.244139047900504,
    27.194030480840407,
    27.14563890308814,
    27.09992982076437,
    27.057868739989736,
    27.02028942271131,
    26.987339812508527,
    26.958945398127685,
    26.935031552445352,
    26.915523648338098,
    26.900347058682488,
    26.889427156355104,
    26.882689314232504,
    26.880058905191266,
    26.881461302107944,
    26.88682187785913,
    26.896066005321373,
    26.909119057371257,
    26.925906406885346,
    26.946353426740213,
    26.970385489812415,
    26.997927968978534,
    27.02890623711513,
    27.063245667098784,
    27.100872405478487,
    27.141788085682595,
    27.18613208761893,
    27.23405844714424,
    27.28572120011529,
    27.341274382388807,
    27.40087202982156,
    27.464668178270284,
    27.532816863591755,
    27.6054721216427,
    27.68278798827987,
    27.76491849936002,
    27.852017690739913,
    27.944239598276276,
    28.04173825782587,
    28.144667705245443,
    28.253181976391758,
    28.367435107121548,
    28.487581133291567,
    28.613670208456135,
    28.744680102171497,
    28.878955960873235,
    29.014834755445133,
    29.15065345677099,
    29.2847490357346,
    29.415458463219757,
    29.54111871011025,
    29.660066747289875,
    29.770639545642418,
    29.87117407605168,
    29.96000730940145,
    30.03547621657552,
    30.09591776845769,
    30.13966893593175,
    30.1650668378277,
    30.170731317602453,
    30.156153470332992,
    30.12099168198868,
    30.064904338538895,
    29.987549825952986,
    29.888586530200318,
    29.76767283725027,
    29.62446713307218,
    29.458627803635437,
    29.269813234909392,
    29.05768181286341,
    28.82189192346686,
    28.562101952689098,
    28.27797028649949,
    27.96916043208111,
    27.635858190224308,
    27.279215172235986,
    26.900487465060355,
    26.500931155641602,
    26.08180233092391,
    25.644357077851474,
    25.18985148336849,
    24.719541634419137,
    24.234683617947603,
    23.736533520898096,
    23.226347430214787,
    22.705381432841875,
    22.17489161572354,
    21.636134065803986,
    21.090359509952872,
    20.538378370208846,
    19.98023985469417,
    19.415917536087093,
    18.845384987065927,
    18.26861578030893,
    17.685583488494377,
    17.09626168430053,
    16.500623940405674,
    15.898643829488087,
    15.29029492422603,
    14.67555079729779,
    14.054385021381608,
    13.4267711691558,
    12.792682813298626,
    12.152093526488352,
    11.504976881403254,
    10.85130645072161,
    10.191059619390893,
    9.524369922270077,
    8.851578460139647,
    8.173040691118118,
    7.489112073324053,
    6.800148064875976,
    6.106504123892418,
    5.408535708491928,
    4.706598276792998,
    4.001047286914189,
    3.292238196974071,
    2.5805264650911126,
    1.8662675493839131,
    1.149816907970942,
    0.431529998970799,
    -0.28823771949804855,
    -1.0091307893169985,
    -1.7307937523675831,
    -2.452871150531236,
    -3.175025896838831,
    -3.8970635045399176,
    -4.618856173004857,
    -5.34027648035611,
    -6.061197004716004,
    -6.781490324207005,
    -7.501029016951439,
    -8.21968566107177,
    -8.937332834690359,
    -9.653843115929572,
    -10.369089082911865,
    -11.082943313759575,
    -11.795278386595154,
    -12.50596687954094,
    -13.214881370719398,
    -13.92189443825285,
    -14.626878660263754,
    -15.329706614874485,
    -16.030250880207394,
    -16.728384034384955,
    -17.423978655529485,
    -18.1169428445261,
    -18.807367272413174,
    -19.495401100114666,
    -20.181193515127756,
    -20.86489370494973,
    -21.546650857077804,
    -22.226614159009173,
    -22.90493279824114,
    -23.581755962270883,
    -24.25723283859569,
    -24.931512614712744,
    -25.60474447811933,
    -26.27707761631264,
    -26.94866121678995,
    -27.61964446704848,
    -28.290176554585436,
    -28.960406666898105,
    -29.630483991483665,
    -30.30055771583942,
    -30.970777027462532,
    -31.641291113850304,
    -32.312246865743866,
    -32.98342237783118,
    -33.653824500579375,
    -34.3223632839779,
    -34.98794877801634,
    -35.64949103268413,
    -36.30590009797085,
    -36.95608602386596,
    -37.59895886035901,
    -38.23342865743945,
    -38.85840546509687,
    -39.47279933332073,
    -40.07552031210051,
    -40.665478451425784,
    -41.24158380128601,
    -41.80274641167075,
    -42.34787633256946,
    -42.87588361397169,
    -43.38567830586691,
    -43.87617045824467,
    -44.34638894903146,
    -44.79594872179135,
    -45.22464508864963,
    -45.63227341153372,
    -46.018629052371104,
    -46.3835073730892,
    -46.726703735615544,
    -47.048013501877534,
    -47.34723203380267,
    -47.62415469331839,
    -47.87857684235215,
    -48.110293842831446,
    -48.31910105668371,
    -48.5047938458364,
    -48.667167572217,
    -48.80601759775296,
    -48.92113928437175,
    -49.01241408817505,
    -49.08034889662916,
    -49.125726724134445,
    -49.14933180019698,
    -49.15194835432277,
    -49.13436061601785,
    -49.09735281478826,
    -49.04170918014001,
    -48.96821394157915,
    -48.87765132861171,
    -48.77080557074371,
    -48.64846089748119,
    -48.51140153833017,
    -48.36041172279671,
    -48.1962756803868,
    -48.019777640606506,
    -47.83170183296183,
    -47.63283248695883,
    -47.423955024222735,
    -47.20588448111411,
    -46.9794667826755,
    -46.74554930099959,
    -46.5049794081791,
    -46.25860447630674,
    -46.007271877475254,
    -45.75182898377732,
    -45.49312316730568,
    -45.232001800153036,
    -44.96931225441211,
    -44.705901902175604,
    -44.442618115536256,
    -44.18030826658678,
    -43.91981972741986,
    -43.66199987012827,
    -43.407696066804654,
    -43.1577556895418,
    -42.91302611043236,
    -42.674354701569094,
    -42.4425888350447,
    -42.21857588295189,
    -42.00293610971043,
    -41.79475136982175,
    -41.59246522744587,
    -41.39451918414424,
    -41.19935474147837,
    -41.005413401009704,
    -40.81113666429974,
    -40.61496603290989,
    -40.415343008401685,
    -40.21070909233658,
    -39.999505786276025,
    -39.7801745917815,
    -39.551157010414485,
    -39.310894543736445,
    -39.05782869330883,
    -38.79040096069315,
    -38.50705284745082,
    -38.20622585514336,
    -37.886361485332245,
    -37.545901239578875,
    -37.18328661944481,
    -36.797208592957496,
    -36.38786798517754,
    -35.95603072144322,
    -35.50246371456914,
    -35.02793387736978,
    -34.53320812265974,
    -34.019053363253555,
    -33.486236511965735,
    -32.935524481610884,
    -32.3676841850035,
    -31.78348253495817,
    -31.183686444289393,
    -30.569062825811763,
    -29.94037859233979,
    -29.29840065668802,
    -28.643895931671047,
    -27.97763133010336,
    -27.30037376479955,
    -26.612890148574117,
    -25.91594739424167,
    -25.210312414616677,
    -24.496752122513755,
    -23.7760334307474,
    -23.04892325213217,
    -22.31618849948265,
    -21.578596085613334,
    -20.83691292333882,
    -20.091905925473586,
    -19.344342004832253,
    -18.594988074229306,
    -17.844611046479347,
    -17.093977834396856,
    -16.343855350796407,
    -15.595010508492598,
    -14.848210220299897,
    -14.104221399032921,
    -13.363810957506146,
    -12.627745808534181,
]
# x_coord = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
# y_coord = [0, 0, 0, 0, 0]
# spline [array of x, array of y]
rospy.init_node("waypoints", anonymous=True)
rate = rospy.Rate(20)  # hz
path = PoseStamped()
pathMsg = Path()
path_pub = rospy.Publisher("/pathplanning/waypoints", Path, queue_size=10)
print("started generating waypoints")
if __name__ == "__main__":
    j = 0
    colorseq = 0
    tick = time.time()
    color = "ob"
    # rate.sleep()
    # print(x_coord)
    for i in range(len(x_coord)):
        path.pose.position.x = x_coord[i]
        path.pose.position.y = y_coord[i]
        # path.header.seq = i
        # path.header.stamp = rospy.Time.now()
        path.header.frame_id = "map"
        # print("index:", i)
        pathMsg.poses.append(path)
        # print(path)
        # print("x: ", x_coord[i], "y: ", y_coord[i])
        # print(pathMsg.poses[-1])
        # print(len(pathMsg.poses))
        # plt.plot(x_coord[i], y_coord[i], "ob", label="state")
        # plt.plot(pathMsg.poses[j].pose.position.x, pathMsg.poses[j].pose.position.y, color, label="course")
        # plt.pause(0.001)
        j += 1
        if i % 5 == 0:
            # y_coord.append(20 * math.sin(x_coord[i]/3))
            # print("x: ", x_coord[i], "y: ", y_coord[i])
            # print("length of pose message:",len(pathMsg.poses), "index:",i)
            # for j in range(len(pathMsg.poses)):
            #     plt.plot(pathMsg.poses[j].pose.position.x, pathMsg.poses[j].pose.position.y, "ob", label="course")
            #     plt.pause(0.001)
            #     print(len(pathMsg.poses))
            # print(pathMsg.poses[-1])
            if colorseq % 2:
                color = "ob"
            else:
                color = "or"

            # print("firstpose:\n",pathMsg.poses[-1].pose.position , "lastpose:\n", pathMsg.poses[0].pose.position)

            # pathMsg.poses = []
            # plt.clf()
            colorseq += 1
            j = 0
        if i % 10:
            path_pub.publish(pathMsg)
            print("published path: ", pathMsg.poses)
            pathMsg.poses = []
            # i = i - 100
            # break
            """
            bya5od a5er point mab3ota ka index
            """
            # plt.plot(waypoints.xList[targetInd], waypoints.yList[targetInd], "xg", label="target")
            # plt.plot(state.position.x, state.position.y, "ob", label="state")
            # plt.grid(True)
            # plt.plot(waypoints.xList[targetInd], waypoints.yList[targetInd], "xg", label="target")
            # plt.axis("equal")
            # plt.title(name)
            # plt.legend()
        rate.sleep()

    zip_object = list(zip(x_coord, y_coord))
    tock = time.time()
    print("Time taken: ", tock - tick)
    print("The track is complete")
    # print(zip_object)
